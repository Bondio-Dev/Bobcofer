from __future__ import annotations
# –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö tgbot.py (–¥–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö import-–æ–≤)

import json, logging
from datetime import datetime, timezone
import csv
from report import generate_delivery_stats_report

class JsonFormatter(logging.Formatter):
    """
    –ü–∏—à–µ—Ç –µ–¥–∏–Ω–∏—á–Ω—É—é –∑–∞–ø–∏—Å—å –≤ bot.log:
    
    "time": "2025-07-20 02:05:31",
    "template": "",
    "funnel": "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç", 
    "phone": "+7981‚Ä¶",
    "success": true,
    "error": "",
    "msg": "–ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ logger.*"
    
    """
    def format(self, record: logging.LogRecord) -> str:
        log_record = {
            "time": datetime.now(timezone.utc).replace(microsecond=0)
                    .isoformat(sep=' '), # <- fix utcnow()
            "template": getattr(record, "template", ""),
            "funnel": getattr(record, "funnel", ""), 
            "phone": getattr(record, "phone", ""), # –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä
            "success": getattr(record, "success", ""), # –µ–¥–∏–Ω–æ–µ –ø–æ–ª–µ OK/Fail
            "error": getattr(record, "err", ""), # —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏/–∏—Å–∫–ª—é—á–µ–Ω–∏—è
            "msg": record.getMessage(),
        }
        return json.dumps(log_record, ensure_ascii=False) # (+)

import asyncio
import os
import re
import sys
import uuid
import time
from datetime import datetime, timedelta, timezone
from itertools import islice
from pathlib import Path
import ssl
import csv
import uuid
import os
from aiogram.fsm.state import State, StatesGroup

import aiohttp
import phonenumbers
import requests
from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
import pywhatkit

# ---------------------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_DIR = Path(__file__).parent
TOKEN_FILE = BASE_DIR / "token.json"
CONTACTS_FILE = BASE_DIR / "contacts.json"
MAIN_DATA = BASE_DIR / "data.json"

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–∑ bot.py)
TEMPLATES_FILE = BASE_DIR / "templates.json"

import random
def get_random_wait_time():
    return random.randint(10, 45)

AMOCRM_DIR = BASE_DIR / "amocrm_contacts"
TEMP_CONTACTS_DIR = BASE_DIR / "temp_contacts"  # ‚Üê –ù–û–í–ê–Ø –°–¢–†–û–ö–ê
AMOCRM_DIR.mkdir(exist_ok=True)

# ---------------------------------------------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
LOG_FILE = BASE_DIR / "bot.log"
_json_handler = logging.FileHandler(LOG_FILE, encoding="utf-8")
_json_handler.setFormatter(JsonFormatter())

# —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è _json_handler
_console = logging.StreamHandler()
_console.setFormatter(logging.Formatter("[%(levelname)s] %(message)s"))

logging.basicConfig(level=logging.INFO, handlers=[_json_handler, _console])
logger = logging.getLogger(__name__)

# ---------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ bot.py
def log_message(
    phone: str,
    success: bool,
    response_text: str = "",
    template_id: str = "",
    funnel: str = ""
):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –≤ –∫–æ–Ω–µ—Ü CSV-—Ñ–∞–π–ª–∞. –ù–µ —Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª –∏ –Ω–µ –ø–∏—à–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª logs/delivery_logs.csv —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏.
    """
    log_file = "logs/delivery_logs.csv"
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    status = "SUCCESS" if success else "FAILED"
    phone_str = str(phone)
    template_id = template_id or "-"
    funnel = funnel or "-"
    response_text = response_text.replace("\n", " ").replace("\r", " ") if response_text else ""
    response_text = response_text[:300]
    
    with open(log_file, mode='a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([ts, phone_str, template_id, funnel, status, response_text])

# ---------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ bot.py (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
def send_message_sync(dest: str, message: str, funnel: str = "") -> tuple[int, str]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ PyWhatKit"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not dest.startswith('+'):
            dest = '+' + dest
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        pywhatkit.sendwhatmsg_instantly(
            phone_no=dest,
            message=message,
            wait_time=get_random_wait_time(),
            tab_close=True
        )
        
        log_message(dest, True, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "pywhatkit", funnel)
        return 202, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ PyWhatKit: {e}"
        log_message(dest, False, error_msg, "pywhatkit", funnel)
        return 0, error_msg

# ---------------------------------------------------------------------------
async def send_message_async(dest: str, message: str, funnel: str = "-") -> tuple[int, str]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API"""
    try:
        token = json.loads(TOKEN_FILE.read_text(encoding="utf-8"))["BOT_TOKEN"]
        import aiohttp
        import ssl
        
        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        connector = aiohttp.TCPConnector(ssl=ssl_context)
        
        async with aiohttp.ClientSession(connector=connector) as session:
            url = f"https://api.telegram.org/bot{token}/sendMessage"
            data = {
                "chat_id": dest,
                "text": message,
                "parse_mode": "HTML"
            }
            
            async with session.post(url, data=data) as response:
                status_code = response.status
                response_text = await response.text()
                
                ts = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                phone_str = str(dest)
                template_id = "text_template"
                status = "SUCCESS" if status_code == 200 else "FAILED"
                
                with open('logs/delivery_logs.csv', mode='a', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    writer.writerow([ts, phone_str, template_id, funnel, status, response_text[:100]])
                
                return status_code, response_text
                
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return 500, str(e)


# ---------------------------------------------------------------------------
# 5. –£—Ç–∏–ª–∏—Ç–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ (bot.log + delivery_logs.txt)
def load_reports():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
    
    (date, template_id): {
        "total": N,
        "ok": M,
        "fail": K,
        "bad": [(phone, error), ...]
    },
    ...
    
    """
    stats: dict[tuple[str, str], dict] = {}
    txt_path = BASE_DIR / "logs" / "delivery_logs.txt"
    if not txt_path.exists():
        return stats
    
    for line in txt_path.read_text(encoding="utf-8").splitlines():
        line = line.strip()
        if not line:
            continue
        parts = [p.strip() for p in line.split("|")]
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –ª–æ–≥–∞
        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Å—Ç–∏ JSON-–æ—Ç–≤–µ—Ç–æ–≤)
        if len(parts) < 5:
            continue
            
        # –ù–û–í–´–ô –§–û–†–ú–ê–¢: timestamp | phone | template_id | funnel | STATUS | response_text
        try:
            timestamp = parts[0]
            phone = parts[1]
            template_id = parts[2] if parts[2] != "-" else "unknown"
            funnel = parts[3] if parts[3] != "-" else ""
            status = parts[4]
            response_text = parts[5] if len(parts) > 5 else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
            date = timestamp.split()[0]
            key = (date, template_id)
            rec = stats.setdefault(key, {
                "total": 0,
                "ok": 0,
                "fail": 0,
                "bad": []
            })
            
            rec["total"] += 1
            if status == "SUCCESS":
                rec["ok"] += 1
            else:
                rec["fail"] += 1
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ response_text
                error_msg = response_text[:100] if response_text else "Unknown error"
                rec["bad"].append((phone, error_msg))
                
        except (IndexError, ValueError) as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞: {line[:100]}... –û—à–∏–±–∫–∞: {e}")
            continue
    
    return stats

MENU_BUTTONS = [
    ["–í—ã–±—Ä–∞—Ç—å –≤–æ—Ä–æ–Ω–∫—É"],
    ["–ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–æ–≤"],
    ["–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"],
    ["–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–¥–º–∏–Ω–æ–≤"],
    ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç—ã"],
    ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
]

def create_persistent_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    keyboard = [
        [KeyboardButton(text=row[0])] for row in MENU_BUTTONS
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        is_persistent=True,  # ‚Üê –ö–õ–Æ–ß–ï–í–û–ô –ü–ê–†–ê–ú–ï–¢–† - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

# ---------------------------------------------------------------------------
# States
from aiogram.fsm.state import State, StatesGroup

class Form(StatesGroup):
    STATE_MENU             = State()
    STATE_TEMPLATE_CHOOSE  = State()
    STATE_TEMPLATE_CONFIRM = State()
    STATE_TEMPLATE_NEW_1   = State()
    STATE_TEMPLATE_NEW_2   = State()
    STATE_TEMPLATE_VIEW    = State()
    STATE_AUDIENCE         = State()
    STATE_TIME_CHOOSE      = State()
    STATE_TIME_INPUT       = State()
    STATE_TIME_RANGE       = State()   # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
    STATE_CONFIRM          = State()
    STATE_ADMIN_ADD        = State()
    STATE_AMOCRM_INPUT     = State()
    STATE_AMOCRM_FILENAME  = State()
    STATE_REPORT_LIST      = State()
    STATE_REPORT_DETAIL    = State()
    STATE_PHOTO_UPLOAD = State()



# ---------------------------------------------------------------------------
# AmoCRM manager
class AmoCRMCategoryManager:
    def __init__(self) -> None:
        cfg_path = os.path.join(os.path.dirname(__file__), "conf.json")
        with open(cfg_path, encoding="utf-8") as fh:
            cfg = json.load(fh)
        acc = cfg["amocrm"]
        self.subdomain: str = acc["subdomain"]
        self.access_token: str = acc["access_token"]
        self._base_urls = [
            f"https://{self.subdomain}.amocrm.ru/api/v4",
            f"https://{self.subdomain}.kommo.com/api/v4",
        ]
        self.headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Content-Type": "application/json",
        }
        self.base_url: str = self._detect_base_url()

    def _detect_base_url(self) -> str:
        for url in self._base_urls:
            try:
                if (
                    requests.get(
                        f"{url}/account", headers=self.headers, timeout=6
                    ).status_code
                    == 200
                ):
                    return url
            except requests.exceptions.RequestException:
                pass
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π –¥–æ–º–µ–Ω Kommo")

    def get_pipelines(self) -> list[tuple[int, str]]:
        r = requests.get(
            f"{self.base_url}/leads/pipelines", headers=self.headers, timeout=20
        )
        r.raise_for_status()
        return [(p["id"], p["name"]) for p in r.json()["_embedded"]["pipelines"]]

    def get_pipeline_statuses(self, pipeline_id: int) -> list[tuple[int, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤"""
        r = requests.get(
            f"{self.base_url}/leads/pipelines/{pipeline_id}/statuses",
            headers=self.headers,
            timeout=20
        )
        r.raise_for_status()
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —ç—Ç–∞–ø—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        system_stages = ['–ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–µ', '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ', '–ó–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ']
        
        statuses = []
        for status in r.json()["_embedded"]["statuses"]:
            status_name = status["name"]
            if status_name not in system_stages:
                statuses.append((status["id"], status_name))
        
        return statuses

    def get_leads(self, pipeline_id: int, status_id: int) -> list[dict]:
        out, page = [], 1
        while True:
            params = {
                "limit": 250,
                "page": page,
                "filter[statuses][0][pipeline_id]": pipeline_id,
                "filter[statuses][0][status_id]": status_id,
                "with": "contacts",
            }
            r = requests.get(
                f"{self.base_url}/leads",
                headers=self.headers,
                params=params,
                timeout=20,
            )
            if r.status_code == 204:
                break
            r.raise_for_status()
            batch = r.json()["_embedded"]["leads"]
            if not batch:
                break
            out.extend(batch)
            page += 1
        return out

    def get_leads_all_statuses(self, pipeline_id: int) -> list[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–¥–µ–ª–∫–∏ –≤–æ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏."""
        all_leads = []
        for status_id, _ in self.get_pipeline_statuses(pipeline_id):
            all_leads.extend(self.get_leads(pipeline_id, status_id))
        return all_leads

    def get_contacts_bulk(self, ids: list[int]) -> dict[int, dict]:
        result: dict[int, dict] = {}
        ids_iter = iter(ids)
        while chunk := list(islice(ids_iter, 200)):
            params = {"with": "custom_fields_values"}
            params.update({f"id[{i}]": cid for i, cid in enumerate(chunk)})
            r = requests.get(
                f"{self.base_url}/contacts",
                headers=self.headers,
                params=params,
                timeout=20,
            )
            if r.status_code != 200:
                continue
            for c in r.json()["_embedded"]["contacts"]:
                result[c["id"]] = c
        return result

    @staticmethod
    def extract_phone(cfv: list[dict]) -> str:
        for fld in cfv or []:
            if fld.get("field_code") == "PHONE":
                for val in fld.get("values", []):
                    phone = str(val.get("value", "")).strip()
                    if phone:
                        return phone
        return ""

    @staticmethod
    def normalize_phone(phone: str):
        digits = re.sub(r"\D", "", phone)
        if digits.startswith("8") and len(digits) == 11:
            digits = "7" + digits[1:]
        elif digits.startswith("7") and len(digits) == 11:
            pass
        elif digits.startswith("9") and len(digits) == 10:
            digits = "7" + digits
        digits = "+" + digits
        try:
            parsed = phonenumbers.parse(digits, None)
            if phonenumbers.is_valid_number(parsed):
                return phonenumbers.format_number(
                    parsed, phonenumbers.PhoneNumberFormat.E164
                )
        except phonenumbers.phonenumberutil.NumberParseException:
            pass
        return False

# ---------------------------------------------------------------------------
from main import build_funnels_snapshot



# ---------------------------------------------------------------------------
# –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ—Ä–æ–Ω–æ–∫: —á–∏—Å—Ç–∏–º –ø–∞–ø–∫—É –∏ –ø–∏—à–µ–º funnels.json
async def update_amocrm_funnels() -> str:
    attempt = 0
    max_attempts = 3
    pause_seconds = 10
    
    # –ß–∏—Å—Ç–∏–º –ø–∞–ø–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
    for f in AMOCRM_DIR.glob("*.json"):
        try:
            f.unlink()
        except Exception:
            logger.warning("–ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å %s", f)
    
    # –¶–∏–∫–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    while attempt < max_attempts:
        try:
            snap = await asyncio.to_thread(build_funnels_snapshot)
            return f"‚úÖ –°–Ω—è—Ç–æ {len(snap['funnels'])} –≤–æ—Ä–æ–Ω–æ–∫, –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—á–∏—â–µ–Ω—ã."
        except Exception as e:
            attempt += 1
            logger.exception(f"build_funnels_snapshot –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –Ω–µ—É–¥–∞—á–Ω–∞: %s", e)
            
            if attempt < max_attempts:
                logger.info(f"–ü–∞—É–∑–∞ {pause_seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(pause_seconds)
            else:
                logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                return "‚ùå –°–µ—Ä–≤–µ—Ä AmoCRM –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
    
    # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    return "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ—Ä–æ–Ω–æ–∫"


class JSONStore:
    def __init__(self, path: Path):
        self.path = path

    def read(self) -> list:
        """Read data from JSON file with proper error handling"""
        try:
            if not self.path.exists():
                return []
            
            content = self.path.read_text(encoding="utf-8").strip()
            if not content:
                return []
                
            return json.loads(content)
        except (json.JSONDecodeError, FileNotFoundError) as e:
            logger.warning(f"Error reading {self.path}: {e}. Returning empty list.")
            return []
        except Exception as e:
            logger.error(f"Unexpected error reading {self.path}: {e}")
            return []

    def write(self, data: list):
        """Write data to JSON file"""
        try:
            self.path.write_text(
                json.dumps(data, ensure_ascii=False, indent=2), 
                encoding="utf-8"
            )
        except Exception as e:
            logger.error(f"Error writing to {self.path}: {e}")

    def append(self, item):
        """Append item to the list"""
        data = self.read()
        data.append(item)
        self.write(data)

    def remove(self, predicate_func):
        """Remove items matching predicate"""
        data = self.read()
        filtered = [item for item in data if not predicate_func(item)]
        self.write(filtered)


admins_store = JSONStore(BASE_DIR / "admins.json")
scheduled_store = JSONStore(BASE_DIR / "scheduled.json")

def admin_required(func):
    async def wrapper(message_or_query, state: FSMContext, *args, **kwargs):
        user_id = (
            message_or_query.from_user.id
            if isinstance(message_or_query, (Message, CallbackQuery))
            else None
        )
        if user_id not in admins_store.read():
            if isinstance(message_or_query, CallbackQuery):
                await message_or_query.message.reply_text(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í–∞—à ID: <code>{user_id}</code>")
            else:
                await message_or_query.reply(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í–∞—à ID: <code>{user_id}</code>")
            return
        return await func(message_or_query, state)
    return wrapper

def ensure_dirs():
    """Ensure all required directories and files exist with proper initialization"""
    BASE_DIR.mkdir(exist_ok=True)
    AMOCRM_DIR.mkdir(exist_ok=True)
    TEMP_CONTACTS_DIR.mkdir(exist_ok=True)

    # Initialize token file
    if not TOKEN_FILE.exists():
        TOKEN_FILE.write_text('{"BOT_TOKEN": "YOUR_TOKEN_HERE"}', encoding="utf-8")

    # Initialize contacts file
    if not CONTACTS_FILE.exists():
        CONTACTS_FILE.write_text("[]", encoding="utf-8")

    # Initialize main data file
    if not MAIN_DATA.exists():
        MAIN_DATA.write_text('{"1": "", "2": ""}', encoding="utf-8")

    # Initialize templates file
    if not TEMPLATES_FILE.exists():
        default_templates = [
            {
                "id": "greeting",
                "name": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                "content": "–ü—Ä–∏–≤–µ—Ç, {name}! {message}"
            },
            {
                "id": "reminder",
                "name": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", 
                "content": "–£–≤–∞–∂–∞–µ–º—ã–π {name}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º: {message}"
            }
        ]
        TEMPLATES_FILE.write_text(
            json.dumps(default_templates, ensure_ascii=False, indent=2),
            encoding="utf-8"
        )
    
    # Initialize scheduled jobs file (–ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï)
    scheduled_file = BASE_DIR / "scheduled.json"
    if not scheduled_file.exists() or scheduled_file.stat().st_size == 0:
        scheduled_file.write_text("[]", encoding="utf-8")
        logger.info("Initialized empty scheduled jobs file")
    
    # Initialize admins file
    admins_file = BASE_DIR / "admins.json"
    if not admins_file.exists() or admins_file.stat().st_size == 0:
        admins_file.write_text("[]", encoding="utf-8")
        logger.info("Initialized empty admins file")


def local_offset() -> timedelta:
    return datetime.now() - datetime.now(timezone.utc).replace(tzinfo=None)

def fmt_local(dt: datetime) -> str:
    return (dt + local_offset()).strftime("%d.%m.%Y %H:%M")

def now_tz():
    return datetime.now(timezone.utc)

def parse_datetime(text: str) -> datetime | None:
    try:
        dt_local = datetime.strptime(text, "%d.%m.%Y %H:%M")
        return (dt_local - local_offset()).replace(tzinfo=timezone.utc)
    except ValueError:
        return None

def render_message_main() -> str:
    try:
        data = json.loads(MAIN_DATA.read_text(encoding="utf-8"))
        return f'{data.get("1","")}\n{data.get("2","")}'
    except Exception:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é build_scheduled_rows (–¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
def build_scheduled_rows():
    """Build inline keyboard rows for scheduled jobs with error handling"""
    try:
        jobs = scheduled_store.read()
        
        # If no jobs, return empty list
        if not jobs:
            return []
        
        rows = []
        for j in jobs:
            try:
                # Validate job structure
                if not isinstance(j, dict) or 'run_at' not in j or 'job_id' not in j:
                    logger.warning(f"Invalid job structure: {j}")
                    continue
                    
                # Parse and format datetime
                run_at_str = j["run_at"]
                if isinstance(run_at_str, str):
                    run_at = datetime.fromisoformat(run_at_str)
                    formatted_time = fmt_local(run_at)
                else:
                    logger.warning(f"Invalid run_at format: {run_at_str}")
                    formatted_time = "–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"
                
                rows.append([
                    InlineKeyboardButton(
                        text=formatted_time,
                        callback_data=f"job_detail:{j['job_id']}",
                    )
                ])
            except Exception as e:
                logger.error(f"Error processing job {j}: {e}")
                continue
        
        return rows
        
    except Exception as e:
        logger.error(f"Error in build_scheduled_rows: {e}")
        return []



# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é build_admin_rows (–¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
def build_admin_rows():
    admins = admins_store.read()
    rows = [
        [
            InlineKeyboardButton(
                text=str(a), callback_data=f"adm_detail:{a}"
            )
        ]
        for a in admins
    ]
    rows.append(
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="adm_add")]
    )
    rows.append(
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
    )
    return rows



# ---------------------------------------------------------------------------
class SimpleJobQueue:
    def __init__(self):
        self.jobs = []

    async def run_once(self, callback, when: datetime, data, name: str):
        job = {"callback": callback, "when": when, "data": data, "name": name}
        self.jobs.append(job)

    async def process_jobs(self):
        while True:
            current_time = now_tz()
            jobs_to_run = [
                job for job in self.jobs if job["when"] <= current_time
            ]
            
            for job in jobs_to_run:
                try:
                    class JobContext:
                        def __init__(self, data):
                            self.data = data
                    
                    context = JobContext(job["data"])
                    await job["callback"](context)
                    self.jobs.remove(job)
                except Exception as e:
                    logger.exception(
                        f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {job['name']}: {e}"
                    )
            
            await asyncio.sleep(10)

job_queue = SimpleJobQueue()

#-----------------

import random
# ---------------------------------------------------------------------------
# 2) –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –≤ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
# 2) –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
async def job_send_distribution(context):
    try:
        job = context.data
        contacts_path = Path(job["contacts"])
        if not contacts_path.exists():
            logger.error("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ñ–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω", contacts_path)
            return

        contacts_data = json.loads(contacts_path.read_text("utf-8"))
        templates = json.loads(TEMPLATES_FILE.read_text("utf-8"))
        template = next((t for t in templates if t["id"] == job["template_id"]), None)
        if not template:
            logger.error("–®–∞–±–ª–æ–Ω %s –Ω–µ –Ω–∞–π–¥–µ–Ω", job["template_id"])
            return

        day_from = datetime.strptime(job.get("day_from", "00:00"), "%H:%M").time()
        day_until = datetime.strptime(job.get("day_until", "23:59"), "%H:%M").time()
        photo_file_id = job.get("photo_file_id")

        for contact in contacts_data:
            while True:
                now_local = (now_tz() + local_offset()).time()
                if day_from <= now_local <= day_until:
                    break
                await asyncio.sleep(60)

            message = template["content"].format(
                name=contact["name"],
                message=json.loads(MAIN_DATA.read_text(encoding="utf-8"))["2"]
            )
            if photo_file_id:
                code, resp = await send_message_with_photo_async(
                    dest=contact["phone"],
                    message=message,
                    photo_file_id=photo_file_id,
                    funnel=job["job_id"]
                )
            else:
                code, resp = await send_message_async(
                    dest=contact["phone"],
                    message=message,
                    funnel=job["job_id"]
                )

            log_extra = {
                "template": job["template_id"],
                "funnel": job["job_id"],
                "phone": contact["phone"],
                "success": code == 202,
                "err": "" if code == 202 else resp
            }
            level = logging.INFO if code == 202 else logging.ERROR
            logger.log(level, "%s ‚Üí %s", contact["phone"], "OK" if code == 202 else f"ERR {code}", extra=log_extra)
            pause_seconds = random.randint(10, 15) #–∏—Å–ø—Ä–∞–≤–∏—Ç—å
            logger.info(f"–ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏: {pause_seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(pause_seconds)

        scheduled_store.remove(lambda x: x["job_id"] == job["job_id"])
        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ %s –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (%d –Ω–æ–º–µ—Ä–æ–≤)", job["job_id"], len(contacts_data))

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ job_send_distribution")

async def send_message_with_photo_async(dest: str, message: str, photo_file_id: str, funnel: str = "-") -> tuple[int, str]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram Bot API"""
    try:
        token = json.loads(TOKEN_FILE.read_text(encoding="utf-8"))["BOT_TOKEN"]
        import aiohttp
        import ssl
        
        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        connector = aiohttp.TCPConnector(ssl=ssl_context)
        
        async with aiohttp.ClientSession(connector=connector) as session:
            url = f"https://api.telegram.org/bot{token}/sendPhoto"
            data = {
                "chat_id": dest,
                "photo": photo_file_id,
                "caption": message,
                "parse_mode": "HTML"
            }
            
            async with session.post(url, data=data) as response:
                status_code = response.status
                response_text = await response.text()
                
                ts = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                phone_str = str(dest)
                template_id = "photo_template"
                status = "SUCCESS" if status_code == 200 else "FAILED"
                
                with open('logs/delivery_logs.csv', mode='a', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    writer.writerow([ts, phone_str, template_id, funnel, status, response_text[:100]])
                
                return status_code, response_text
                
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return 500, str(e)




# 2.7) –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ schedule_job –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
def schedule_job(run_at: datetime,
                contacts_file: Path,
                template_id: str,
                template_lang: str = "ru",
                day_from: str = "00:00",
                day_until: str = "23:59",
                photo_file_id: str = None) -> str:
    job_id = f"job_{uuid.uuid4().hex[:8]}"
    data = {
        "job_id": job_id,
        "run_at": run_at.isoformat(),
        "contacts": str(contacts_file),
        "template_id": template_id,
        "template_lang": template_lang,
        "day_from": day_from,
        "day_until": day_until,
    }
    if photo_file_id:
        data["photo_file_id"] = photo_file_id

    scheduled_store.append(data)
    asyncio.create_task(
        job_queue.run_once(job_send_distribution, run_at, data, job_id)
    )
    return job_id

router = Router()

# ---------------------------------------------------------------------------
@router.message(CommandStart())
@admin_required
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    await message.reply(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_persistent_main_menu()  # ‚Üê –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ
    )
    await state.set_state(Form.STATE_MENU)

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@admin_required
async def handle_home_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await state.clear()
    
    await message.reply(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_persistent_main_menu()
    )
    await state.set_state(Form.STATE_MENU)

# ---------------------------------------------------------------------------
# –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_menu –Ω–∞ —ç—Ç–æ—Ç:
@router.message(lambda message: message.text in [button[0] for button in MENU_BUTTONS])
@admin_required
async def handle_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    current_state = await state.get_state()
    if current_state is None:
        await state.set_state(Form.STATE_MENU)
    
    text = message.text
    
    if text == "–í—ã–±—Ä–∞—Ç—å –≤–æ—Ä–æ–Ω–∫—É":
        await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Ä–æ–Ω–∫–∏‚Ä¶")
        result = await update_amocrm_funnels()
        await ask_audience(message, state, result)
        return

    if text == "–ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–æ–≤":
        await view_templates(message, state)
        return

    if text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç—ã":
        await show_reports(message, state)
        return

    if text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö":
        rows = build_scheduled_rows()
        if not rows:
            await message.reply("üì≠ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –Ω–µ—Ç.")
            return

        await message.reply(
            "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=rows),
        )
        return

    if text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–¥–º–∏–Ω–æ–≤":
        rows = build_admin_rows()
        await message.reply(
            "üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=rows),
        )
        return

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.reply(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=create_persistent_main_menu()
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ —Å—é–¥–∞ - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    await message.reply("‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")



# ---------------------------------------------------------------------------
# 6. –•–µ–Ω–¥–ª–µ—Ä—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤
import pandas as pd

LOG_FILE = 'logs/delivery_logs.csv'

async def show_reports(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É funnel ID.
    """
    try:
        df = pd.read_csv(LOG_FILE, parse_dates=['timestamp'])
        if df.empty:
            await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–≥–∞—Ö.")
            return

        funnel_stats = {}
        for funnel, group in df.groupby('funnel'):
            min_time = group['timestamp'].min()
            date_label = min_time.strftime('%d.%m.%Y %H:%M')
            total_count = len(group)
            success_count = (group['status'] == 'SUCCESS').sum()
            display_name = f"{date_label} ‚Äì {success_count}/{total_count}"
            funnel_stats[funnel] = {
                'display_name': display_name,
                'min_time': min_time,
                'total': total_count,
                'success': success_count,
            }

        sorted_funnels = sorted(
            funnel_stats.items(),
            key=lambda x: x[1]['min_time'],
            reverse=True
        )

        buttons = []
        for funnel, stats in sorted_funnels:
            text = stats['display_name']
            callback_stats = f"funnel_rep:{funnel}"
            buttons.append([
                InlineKeyboardButton(text=text,  callback_data=callback_stats),
            ])


        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rep_back")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.reply("üìä –û—Ç—á—ë—Ç—ã –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∞–º:", reply_markup=keyboard)
        # –£–î–ê–õ–ï–ù–ê –°–¢–†–û–ö–ê: await state.set_state(Form.STATE_REPORT_LIST)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ show_reports: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á—ë—Ç–æ–≤.")




# 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –æ—Ç—á—ë—Ç—É
@router.callback_query(F.data.startswith("funnel_rep:"))
@admin_required
async def cb_funnel_report_detail(query: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ (funnel).
    """
    try:
        await query.answer()
        funnel = query.data.split(":", 1)[1]

        # –ß–∏—Ç–∞–µ–º –ª–æ–≥
        df = pd.read_csv(LOG_FILE, parse_dates=['timestamp'])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ funnel
        filtered = df[df['funnel'] == funnel]

        if filtered.empty:
            await query.message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        min_time = filtered['timestamp'].min()
        max_time = filtered['timestamp'].max()
        total = len(filtered)
        success = (filtered['status'] == 'SUCCESS').sum()
        failed = total - success
        unique_phones = filtered['phone'].nunique()
        template_id = filtered['template_id'].iloc[0]
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        phone_results = []
        for _, row in filtered.iterrows():
            phone = f"+{int(row['phone'])}"  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—É—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é
            status = "‚úÖ" if row['status'] == 'SUCCESS' else "‚ùå"
            phone_results.append(f"{status} {phone}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏
        if funnel == '-':
            funnel_display = "–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"
        else:
            funnel_display = f"–†–∞—Å—Å—ã–ª–∫–∞ {funnel.replace('job_', '')}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        duration = (max_time - min_time).total_seconds()
        if duration > 0:
            time_info = f"üìÖ –ü–µ—Ä–∏–æ–¥: {min_time.strftime('%d.%m %H:%M:%S')} - {max_time.strftime('%H:%M:%S')}"
        else:
            time_info = f"üìÖ –í—Ä–µ–º—è: {min_time.strftime('%d.%m.%Y %H:%M:%S')}"

        headline = (
            f"üìÖ {min_time.strftime('%d.%m %H:%M')} ‚Üí "
            f"{max_time.strftime('%H:%M')}  "
            f"({success}/{total})"
        )

        text = (
            f"{headline}\n"
            f"üìã {funnel_display}\n"
            f"üÜî {template_id[:8]}‚Ä¶\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"‚ùå –ù–µ—É–¥–∞—á: {failed}\n"
            f"üì± –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {unique_phones}\n\n"
            f"üìû –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n" + "\n".join(phone_results)
        )


        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤
        if len(text) > 4000:
            phone_results_short = phone_results[:10]
            if len(phone_results) > 10:
                phone_results_short.append(f"... –∏ –µ—â–µ {len(phone_results) - 10} –Ω–æ–º–µ—Ä–æ–≤")
            
            text = (
                f"üìã {funnel_display}\n"
                f"{time_info}\n"
                f"üÜî Template ID: {template_id[:8]}...\n"
                f"üìä –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                f"‚ùå –ù–µ—É–¥–∞—á: {failed}\n"
                f"üì± –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {unique_phones}\n\n"
                f"üìû –ü–µ—Ä–≤—ã–µ 10 –Ω–æ–º–µ—Ä–æ–≤:\n" + "\n".join(phone_results_short)
            )

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons = [
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å JSON",
                                callback_data=f"funnel_json:{funnel}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤",
                                callback_data="back_to_reports")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                callback_data="rep_back")]
        ]


        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await query.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ cb_funnel_report_detail: {e}")
        await query.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ç—á—ë—Ç–∞.")

# 4. –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤ (–¥–æ–±–∞–≤–∏—Ç—å –∫ —Ä–æ—É—Ç–µ—Ä–∞–º)
@router.callback_query(F.data == "back_to_reports")
@admin_required
async def cb_back_to_reports(query: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤.
    """
    await query.answer()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ query.message
    message_like = type('MockMessage', (), {
        'reply': query.message.edit_text
    })()
    await show_reports(message_like, state)

from aiogram.types import FSInputFile

# ---------------------------------------------------------------------------
# 7. –ö–æ–ª–±—ç–∫-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è ¬´üì• –°–∫–∞—á–∞—Ç—å JSON¬ª
@router.callback_query(F.data.startswith("funnel_json:"))
@admin_required
async def cb_download_json(query: CallbackQuery, state: FSMContext) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON-–æ—Ç—á—ë—Ç:
    ‚Ä¢ –∞–≥—Ä–µ–≥–∞—Ç—ã (—É—Å–ø–µ—Ö/–Ω–µ—É–¥–∞—á–∞, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞)
    ‚Ä¢ –ø–µ—Ä–∏–æ–¥ –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞
    ‚Ä¢ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ + —Å—Ç–∞—Ç—É—Å (SUCCESS / FAILED)
    """
    await query.answer()

    try:
        funnel_id = query.data.split(":", 1)[1]

        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥
        df = pd.read_csv(LOG_FILE, parse_dates=["timestamp"])
        df_f = df if funnel_id == "-" else df[df["funnel"] == funnel_id]
        if df_f.empty:
            return await query.message.reply("‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # 2. –û–±—â–∏–µ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        start_ts = df_f["timestamp"].min()
        end_ts   = df_f["timestamp"].max()

        # 3. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total   = len(df_f)
        success = (df_f["status"] == "SUCCESS").sum()
        failed  = total - success
        uniq    = df_f["phone"].nunique()

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–æ–º–µ—Ä–æ–≤
        phones_json = (
            df_f[["phone", "status"]]
            .assign(phone=lambda x: "+" + x["phone"].astype(str))  # –ø—Ä–∏–≤–æ–¥–∏–º –∫ +79‚Ä¶
            .to_dict(orient="records")
        )

        payload = {
            "funnel": funnel_id,
            "generated_at": datetime.now().isoformat(timespec="seconds"),
            "period": {
                "start": start_ts.strftime("%Y-%m-%dT%H:%M:%S"),
                "end":   end_ts.strftime("%Y-%m-%dT%H:%M:%S")
            },
            "summary": {
                "total": int(total),
                "success": int(success),
                "failed": int(failed),
                "unique_phones": int(uniq)
            },
            "phones": phones_json
        }

        # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        filename = f"{funnel_id or 'manual'}_short_{uuid.uuid4().hex[:6]}.json"
        tmp_path = TEMP_CONTACTS_DIR / filename
        tmp_path.write_text(json.dumps(payload, ensure_ascii=False, indent=2), "utf-8")

        # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        await query.message.reply_document(
            document=FSInputFile(tmp_path, filename=filename),
            caption="üìÑJSON-–æ—Ç—á—ë—Ç"
        )

        # 7. –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 –º–∏–Ω
        asyncio.create_task(_auto_cleanup(tmp_path))

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON: %s", e)
        await query.message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.")

async def _auto_cleanup(path: Path, delay: int = 600):
    await asyncio.sleep(delay)
    try:
        path.unlink(missing_ok=True)
    except Exception:
        logger.warning("–ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å %s", path)




# 3) –ö–æ–ª–±—ç–∫ "–Ω–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤
@router.callback_query(F.data == "rep_back")
@admin_required
async def cb_report_back(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await state.set_state(Form.STATE_MENU)

# ---------------------------------------------------------------------------
async def ask_audience(
    message: Message | CallbackQuery,
    state: FSMContext,
    update_result: str | None = None,
):
    snap_path = AMOCRM_DIR / "funnels.json"
    if not snap_path.exists():
        await (
            message.answer
            if isinstance(message, Message)
            else message.message.answer
        )("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ funnels.json ‚Äì –Ω–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑ ¬´–ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–æ–≤¬ª.")
        return

    snap = json.loads(snap_path.read_text("utf-8"))
    buttons = [
        [InlineKeyboardButton(text="üë• –í—Å–µ –≤–æ—Ä–æ–Ω–∫–∏", callback_data="aud:all")]
    ]

    funnel_map = {}
    for idx, item in enumerate(snap["funnels"]):
        fid = f"f{idx}"
        funnel_map[fid] = item["file"]
        buttons.append(
            [
                InlineKeyboardButton(
                    text=f"üìÇ {item['name']}", callback_data=f"aud:{fid}"
                )
            ]
        )

    text = (
        f"{update_result}\n\n" if update_result else ""
    ) + "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:"

    await (
        message.answer
        if isinstance(message, Message)
        else message.message.edit_text
    )(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

    await state.update_data(funnel_map=funnel_map)
    await state.set_state(Form.STATE_AUDIENCE)

# ---------------------------------------------------------------------------
async def fetch_templates(prefix: str = "view_tpl"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞"""
    try:
        if not TEMPLATES_FILE.exists():
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º —à–∞–±–ª–æ–Ω–æ–≤
            default_templates = [
                {
                    "id": "greeting", 
                    "name": "–ë–∞–∑–æ–≤—ã–π",
                    "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! {message}"
                }
            ]
            TEMPLATES_FILE.write_text(
                json.dumps(default_templates, ensure_ascii=False, indent=2),
                encoding="utf-8"
            )
        
        templates = json.loads(TEMPLATES_FILE.read_text(encoding="utf-8"))
        
        tpl_map: dict[str, dict] = {}
        buttons: list[list[InlineKeyboardButton]] = []
        
        for idx, tpl in enumerate(templates):
            tid = f"t{idx}"
            tpl_map[tid] = tpl
            
            buttons.append([
                InlineKeyboardButton(
                    text=tpl["name"],
                    callback_data=f"{prefix}:{tid}"
                )
            ])
        logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: %d", len(templates))

        return templates, tpl_map, buttons
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤")
        return [], {}, []

# ---------------------------------------------------------------------------
async def view_templates(message: Message, state: FSMContext):
    try:
        _, tpl_map, buttons = await fetch_templates(prefix="view_tpl")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤.")
        return

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="view_back")])
    await message.reply(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
    )
    await state.update_data(view_tpl_map=tpl_map)
    # –£–î–ê–õ–ï–ù–ê –°–¢–†–û–ö–ê: await state.set_state(Form.STATE_TEMPLATE_VIEW)



@router.callback_query(F.data == "view_back")
@admin_required
async def cb_view_back(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await state.set_state(Form.STATE_MENU)

# –ó–∞–º–µ–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ cb_view_tpl (—É–¥–∞–ª–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å set_state –≤ –∫–æ–Ω—Ü–µ)
@router.callback_query(F.data.startswith("view_tpl:"))
@admin_required
async def cb_view_tpl(query: CallbackQuery, state: FSMContext):
    await query.answer()
    tpl_id = query.data.split(":", 1)[1]
    data = await state.get_data()
    tpl = data.get("view_tpl_map", {}).get(tpl_id)
    if not tpl:
        await query.message.reply("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    body = tpl.get("content", "")
    raw_meta = tpl.get("meta") or "{}"
    try:
        meta = json.loads(raw_meta) if isinstance(raw_meta, str) else raw_meta
    except json.JSONDecodeError:
        meta = {}
    
    example = "–ü—Ä–∏–º–µ—Ä: " + body.replace("{name}", "–ò–≤–∞–Ω").replace("{message}", "—Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    preview = (
        f"üìã –®–∞–±–ª–æ–Ω:\n{body}\n\nüìù –ü—Ä–∏–º–µ—Ä:\n{example}"
        if example
        else f"üìã –®–∞–±–ª–æ–Ω:\n{body}"
    )
    
    await query.message.edit_text(
        preview,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_back")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
            ]
        ),
    )
    # –£–î–ê–õ–ï–ù–ê –°–¢–†–û–ö–ê: await state.set_state(Form.STATE_TEMPLATE_VIEW)



# ---------------------------------------------------------------------------

def write_error_with_phone_check(lead_id, lead_name, phone, contact_name):
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ - –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º"""
    error_file = 'logs/Error_numbers.csv'
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    existing_phones = set()
    try:
        if os.path.exists(error_file) and os.path.getsize(error_file) > 0:
            with open(error_file, mode='r', encoding='utf-8') as f:
                reader = csv.reader(f)
                next(reader, None)  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for row in reader:
                    if len(row) >= 3:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ phone (3-—è –∫–æ–ª–æ–Ω–∫–∞)
                        existing_phones.add(row[2])
    except Exception:
        pass  # –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å - –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    if str(phone) in existing_phones:
        return False  # –Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –µ—â–µ –Ω–µ—Ç
    with open(error_file, mode='a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([lead_id, lead_name, phone, contact_name])
    
    return True  # –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω




# 1) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {"phone", "name"}
@router.callback_query(F.data.startswith("aud:"))
@admin_required
async def cb_audience(query: CallbackQuery, state: FSMContext):
    await query.answer()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ JSON, –∫—Ä–æ–º–µ funnels.json
    for f in AMOCRM_DIR.glob("*.json"):
        if f.name != "funnels.json":
            try:
                f.unlink()
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª %s: %s", f, e)

    # –ï—Å–ª–∏ "–í—Å–µ –≤–æ—Ä–æ–Ω–∫–∏"
    if query.data == "aud:all":
        contacts = []
        for file in AMOCRM_DIR.glob("*.json"):
            if file.name == "funnels.json":
                continue
            try:
                data = json.loads(file.read_text(encoding="utf-8"))
                if data and isinstance(data[0], str):
                    contacts.extend([{"phone": p, "name": "–ö–ª–∏–µ–Ω—Ç"} for p in data])
                else:
                    contacts.extend(data)
            except Exception:
                continue

        tmp = TEMP_CONTACTS_DIR / f"all_contacts_{uuid.uuid4().hex[:8]}.json"
        tmp.write_text(json.dumps(contacts, ensure_ascii=False), encoding="utf-8")
        await state.update_data(contacts=str(tmp))

        cnt = len(contacts)
        min_secs = 40 * cnt
        max_secs = 345 * cnt
        min_hms = str(timedelta(seconds=min_secs))
        max_hms = str(timedelta(seconds=max_secs))

        await query.message.edit_text(
            f"üìä –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {cnt}\n"
            f"‚è≥ –û—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: –æ—Ç {min_hms} –¥–æ {max_hms}\n"
            "‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="aud_all:yes")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="aud_all:no")],
                ]
            ),
        )
        return

    # –ï—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞
    if query.data.startswith("aud:f"):
        data_state = await state.get_data()
        funnel_map = data_state.get("funnel_map", {})
        fid = query.data.split(":", 1)[1]
        file_name = funnel_map.get(fid)
        if not file_name:
            await query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞.")
            return

        snap_path = AMOCRM_DIR / "funnels.json"
        if not snap_path.exists():
            await query.message.answer("‚ùå –§–∞–π–ª funnels.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        snap = json.loads(snap_path.read_text("utf-8"))

        status_info = next((f for f in snap["funnels"] if f["file"] == file_name), None)
        if not status_info:
            await query.message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        status_name = status_info["name"]
        pipeline_id = status_info["pipeline_id"]
        status_id = status_info["status_id"]
        local = AMOCRM_DIR / file_name

        if not local.exists():
            await query.message.edit_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –∫–æ–Ω—Ç–∞–∫—Ç—ã‚Ä¶")
            try:
                leads = mgr.get_leads(pipeline_id, status_id)
                if not leads:
                    await query.message.answer(f"‚ùå –í —Å—Ç–∞—Ç—É—Å–µ '{status_name}' —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç.")
                    return

                cids = [c["id"] for l in leads for c in l["_embedded"]["contacts"]]
                contacts_raw = mgr.get_contacts_bulk(cids)

                contacts_data = []
                for lead in leads:
                    for c in lead["_embedded"]["contacts"]:
                        co = contacts_raw.get(c["id"], {})
                        phone_raw = mgr.extract_phone(co.get("custom_fields_values", []))
                        name = co.get("name", "") or "–ö–ª–∏–µ–Ω—Ç"
                        normalized = mgr.normalize_phone(phone_raw)
                        if normalized:
                            contacts_data.append({"phone": normalized, "name": name})
                        else:
                            write_error_with_phone_check(lead["id"], lead["name"], phone_raw, name)

                # –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è
                seen = set()
                unique_contacts = []
                for ct in contacts_data:
                    if ct["phone"] not in seen:
                        seen.add(ct["phone"])
                        unique_contacts.append(ct)

                local.write_text(json.dumps(unique_contacts, ensure_ascii=False), "utf-8")
            except Exception as e:
                await query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
                return

        contacts = json.loads(local.read_text("utf-8"))
        tmp = TEMP_CONTACTS_DIR / f"{Path(file_name).stem}_{uuid.uuid4().hex[:8]}.json"
        tmp.write_text(json.dumps(contacts, ensure_ascii=False), "utf-8")
        await state.update_data(contacts=str(tmp))

        cnt = len(contacts)
        min_secs = 40 * cnt
        max_secs = 345 * cnt
        min_hms = str(timedelta(seconds=min_secs))
        max_hms = str(timedelta(seconds=max_secs))

        await query.message.edit_text(
            f"‚úÖ –°—Ç–∞—Ç—É—Å: {status_name}\n"
            f"üìä –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: {cnt}\n"
            f"‚è≥ –û—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏(—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã): –æ—Ç {min_hms} –¥–æ {max_hms}\n"
            "‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="aud_f_yes")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="aud_f_no")],
                ]
            ),
        )
        return

# ---------------------------------------------------------------------------
# –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å–ª–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
async def send_templates_list(where: Message | CallbackQuery, state: FSMContext):
    try:
        _, tpl_map, buttons = await fetch_templates(prefix="tpl_preview")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        await (
            where.answer if isinstance(where, Message) else where.message.reply
        )("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤.")
        return

    await (
        where.answer if isinstance(where, Message) else where.message.edit_text
    )(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
    )

    # –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –∂–¥—ë—Ç cb_tpl_preview
    await state.update_data(templates_list=tpl_map)
    await state.set_state(Form.STATE_TEMPLATE_CHOOSE)

@router.callback_query(F.data == "aud_f_yes")
@admin_required
async def cb_aud_f_yes(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await send_templates_list(query, state)

@router.callback_query(F.data == "aud_f_no")
@admin_required
async def cb_aud_f_no(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.set_state(Form.STATE_MENU)

# ---------------------------------------------------------------------------
# –®–∞–±–ª–æ–Ω—ã ‚Äì —Ä–∞–±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º
@router.callback_query(F.data.startswith("tpl_preview:"))
@admin_required
async def cb_tpl_preview(query: CallbackQuery, state: FSMContext):
    await query.answer()
    tpl_id = query.data.split(":", 1)[1]
    data = await state.get_data()
    tpl = data.get("templates_list", {}).get(tpl_id)
    if not tpl:
        await query.message.reply("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(Form.STATE_MENU)
        return

    body = tpl.get("content", "")
    raw_meta = tpl.get("meta") or "{}"
    try:
        meta = json.loads(raw_meta) if isinstance(raw_meta, str) else raw_meta
    except json.JSONDecodeError:
        meta = {}

    example = meta.get("example", "")
    preview = (
        f"üìã –®–∞–±–ª–æ–Ω:\n{body}\n\nüìù –ü—Ä–∏–º–µ—Ä:\n{example}"
        if example
        else f"üìã –®–∞–±–ª–æ–Ω:\n{body}"
    )

    await state.update_data(tpl_selected=tpl_id)

    await query.message.edit_text(
        preview,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="tpl_ok"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="tpl_cancel"
                    ),
                ]
            ],
        ),
    )
    await state.set_state(Form.STATE_TEMPLATE_CONFIRM)

# 1) –í cb_tpl_confirm: —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–ª—è "2"

@router.callback_query(F.data.in_(["tpl_ok", "tpl_cancel"]))
@admin_required
async def cb_tpl_confirm(query: CallbackQuery, state: FSMContext):
    await query.answer()

    if query.data == "tpl_cancel":
        await query.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.set_state(Form.STATE_MENU)
        return

    data = await state.get_data()
    tpl = data.get("templates_list", {}).get(data.get("tpl_selected"))
    if not tpl:
        await query.message.reply("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.set_state(Form.STATE_MENU)
        return

    raw_meta = tpl.get("meta") or "{}"
    try:
        meta = json.loads(raw_meta) if isinstance(raw_meta, str) else raw_meta
    except json.JSONDecodeError:
        meta = {}

    example = meta.get("example", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –≤ state
    await state.update_data(
        chosen_tpl_id = tpl.get("id") or tpl.get("templateId"),
        chosen_tpl_lang = tpl.get("language") or tpl.get("lang") or "ru",
        new_field2 = example
    )

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –ø–æ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.message.edit_text(
        "üì∏ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo:yes")],
                [InlineKeyboardButton(text="üìù –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="add_photo:no")],
            ]
        ),
    )
    await state.set_state(Form.STATE_PHOTO_UPLOAD)

@router.callback_query(F.data.startswith("add_photo:"))
@admin_required
async def cb_photo_choice(query: CallbackQuery, state: FSMContext):
    await query.answer()
    
    if query.data == "add_photo:no":
        # –ë–µ–∑ —Ñ–æ—Ç–æ ‚Äî –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        await query.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—è {message}:")
        await state.set_state(Form.STATE_TEMPLATE_NEW_2)
        return
    
    # –° —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
    await query.message.edit_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.update_data(photo_requested=True)
    # –û—Å—Ç–∞—ë–º—Å—è –≤ STATE_PHOTO_UPLOAD


# 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
@router.message(Form.STATE_PHOTO_UPLOAD, F.photo)
@admin_required
async def handle_photo_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    try:
        photo = message.photo[-1]
        await message.bot.get_file(photo.file_id)
        await state.update_data(
            photo_file_id=photo.file_id,
            photo_file_unique_id=photo.file_unique_id
        )
        await message.reply("‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—è {message}:")
        await state.set_state(Form.STATE_TEMPLATE_NEW_2)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–µ–∑ —Ñ–æ—Ç–æ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ", callback_data="add_photo:no")]
                ]
            )
        )


# 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-—Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
@router.message(Form.STATE_PHOTO_UPLOAD)
@admin_required  
async def handle_non_photo_in_photo_state(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-—Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    await message.reply(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ'",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ", callback_data="add_photo:no")]
            ]
        )
    )


@router.message(Form.STATE_TEMPLATE_NEW_1)
@admin_required
async def new_tpl_field1(message: Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    new_data = data.get("new", {"1": "", "2": ""})
    if text:
        new_data["1"] = text

    await state.update_data(new=new_data)

    await message.reply(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—è {{message}}:"
    )
    await state.set_state(Form.STATE_TEMPLATE_NEW_2)

# 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—è 2 (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è new_tpl_field2), –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:

@router.message(Form.STATE_TEMPLATE_NEW_2)
@admin_required
async def new_tpl_field2(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
    if not message.text:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    text = message.text.strip()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ new_field2
    data = await state.get_data()
    field2 = data.get("new_field2", "")
    
    if text:
        field2 = text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
    MAIN_DATA.write_text(
        json.dumps({"2": field2}, ensure_ascii=False, indent=2),
        encoding="utf-8"
    )
    
    await message.reply(f"‚úÖ –ü–æ–ª–µ message —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ¬´{field2}¬ª")
    
    # –î–∞–ª—å—à–µ ‚Äî –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    buttons = [
        [InlineKeyboardButton(text="‚ö° –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="time:now")],
        [InlineKeyboardButton(text="‚è∞ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data="time:input")],
    ]
    
    await message.reply(
        "‚è∞ –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
    )
    
    await state.set_state(Form.STATE_TIME_CHOOSE)



# ---------------------------------------------------------------------------
@router.callback_query(F.data.startswith("time:"))
@admin_required
async def cb_time_choose(query: CallbackQuery, state: FSMContext):
    await query.answer()
    if query.data.endswith("now"):
        # –°—Ä–∞–∑—É ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º run_at –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        await state.update_data(
            run_at=now_tz().isoformat(),
            day_from="00:00",
            day_until="23:59"
        )
        return await confirm_distribution(query.message, state)

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è
    await query.message.reply(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(Form.STATE_TIME_INPUT)



@router.message(Form.STATE_TIME_INPUT)
@admin_required
async def time_input(message: Message, state: FSMContext):
    dt = parse_datetime(message.text)
    if not dt or dt < now_tz():
        return await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–ª–∏ –ø—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.update_data(run_at=dt.isoformat())
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    await ask_time_range(message, state)


async def ask_time_range(where: Message, state: FSMContext):
    await where.reply(
        "üåì –£–∫–∞–∂–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ –ø–æ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM‚ÄìHH:MM (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ —Å <code>08:00‚Äì22:00</code>):",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(Form.STATE_TIME_RANGE)

@router.message(Form.STATE_TIME_RANGE)
@admin_required
async def handle_time_range(message: Message, state: FSMContext):
    m = re.match(r"^(\d{2}:\d{2})\s*[‚Äì-]\s*(\d{2}:\d{2})$", message.text.strip())
    if not m:
        return await message.reply("‚ùå –§–æ—Ä–º–∞—Ç HH:MM‚ÄìHH:MM, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    day_from, day_until = m.groups()
    if datetime.strptime(day_from, '%H:%M') >= datetime.strptime(day_until, '%H:%M'):
        return await message.reply("‚ùå –ù–∞—á–∞–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω—Ü–∞.")
    await state.update_data(day_from=day_from, day_until=day_until)
    await confirm_distribution(message, state)



async def confirm_distribution(message: Message, state: FSMContext):
    preview = render_message_main()
    data = await state.get_data()
    run_at = datetime.fromisoformat(data["run_at"])
    day_from = data["day_from"]
    day_until = data["day_until"]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ
    stage_info = ""
    contacts_file = data.get("contacts", "")
    if contacts_file:
        file_name = Path(contacts_file).stem
        if "all_contacts" not in file_name:
            snap_path = AMOCRM_DIR / "funnels.json"
            if snap_path.exists():
                try:
                    snap = json.loads(snap_path.read_text("utf-8"))
                    for funnel in snap["funnels"]:
                        if file_name in funnel["file"]:
                            stage_info = f"\nüìä –≠—Ç–∞–ø: {funnel['name']}"
                            break
                except Exception:
                    pass

    when = "—Å–µ–π—á–∞—Å" if run_at < now_tz() + timedelta(seconds=30) else fmt_local(run_at)
    await message.reply(
        f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ [name]! {preview}\n"
        f"‚è∞ –°—Ç–∞—Ä—Ç: {when}\n"
        f"üåó –î–∏–∞–ø–∞–∑–æ–Ω: {day_from} ‚Äì {day_until}{stage_info}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm:yes')],
                [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='confirm:no')],
            ]
        ),
    )
    await state.set_state(Form.STATE_CONFIRM)


@router.callback_query(F.data.startswith("confirm:"))
@admin_required
async def cb_confirm(query: CallbackQuery, state: FSMContext):
    await query.answer()
    # correctly get_data()
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
    if "contacts" not in data:
        await query.message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é.")
        await state.set_state(Form.STATE_AUDIENCE)
        return

    # –û—Ç–º–µ–Ω–∞
    if query.data.endswith("no"):
        await query.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.set_state(Form.STATE_MENU)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±
    # —Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∏–∑ state
    run_at_iso    = data.get("run_at")
    day_from      = data.get("day_from", "00:00")
    day_until     = data.get("day_until", "23:59")
    contacts_file = Path(data["contacts"])
    template_id   = data.get("chosen_tpl_id")
    template_lang = data.get("chosen_tpl_lang", "ru")

    if not run_at_iso or not template_id:
        await query.message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∏–ª–∏ —à–∞–±–ª–æ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.set_state(Form.STATE_MENU)
        return

    run_at = datetime.fromisoformat(run_at_iso)

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Å —É—á—ë—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    job_id = schedule_job(
        run_at,
        contacts_file,
        template_id,
        template_lang,
        day_from=day_from,
        day_until=day_until,
        photo_file_id=data.get("photo_file_id")
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    when = (
        "—Å—Ä–∞–∑—É"
        if run_at < now_tz() + timedelta(seconds=30)
        else fmt_local(run_at)
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ ({job_id}), –≤—Ä–µ–º—è: {when}."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await query.message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_persistent_main_menu()
    )
    await state.set_state(Form.STATE_MENU)





# ---------------------------------------------------------------------------
# 3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Å–µ–º –≤–æ—Ä–æ–Ω–∫–∞–º –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ "–î–∞"
@router.callback_query(F.data.startswith("aud_all:"))
@admin_required
async def cb_aud_all_confirm(query: CallbackQuery, state: FSMContext):
    await query.answer()
    if query.data == "aud_all:no":
        await query.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.set_state(Form.STATE_MENU)
        return
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞ —Å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–º state["contacts"]
    await send_templates_list(query, state)


# ---------------------------------------------------------------------------
@router.callback_query(F.data.startswith("job_detail:"))
@admin_required
async def cb_job_detail(query: CallbackQuery, state: FSMContext):
    await query.answer()
    job_id = query.data.split(":", 1)[1]
    jobs = scheduled_store.read()
    job = next((j for j in jobs if j["job_id"] == job_id), None)
    if not job:
        await query.message.reply("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    run_at = datetime.fromisoformat(job["run_at"])
    when = fmt_local(run_at)

    try:
        contacts_count = len(
            json.loads(Path(job["contacts"]).read_text(encoding="utf-8"))
        )
    except Exception:
        contacts_count = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    buttons = [
        [
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"job_delete:{job_id}"
            )
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="job_cancel")],
    ]

    await query.message.edit_text(
        f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:\n"
        f"üïí –í—Ä–µ–º—è: {when}\n"
        f"üë• –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contacts_count}\n"
        f"üÜî ID: {job_id}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
    )

@router.callback_query(F.data.startswith("job_delete:"))
@admin_required
async def cb_job_delete(query: CallbackQuery, state: FSMContext):
    await query.answer()
    job_id = query.data.split(":", 1)[1]
    scheduled_store.remove(lambda x: x["job_id"] == job_id)
    
    job_queue.jobs = [
        j
        for j in job_queue.jobs
        if j.get("data", {}).get("job_id") != job_id
    ]
    
    await query.message.edit_text(f"‚úÖ –ó–∞–¥–∞—á–∞ {job_id} —É–¥–∞–ª–µ–Ω–∞.")
    await state.set_state(Form.STATE_MENU)

@router.callback_query(F.data == "job_cancel")
@admin_required
async def cb_job_cancel(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.set_state(Form.STATE_MENU)

# ---------------------------------------------------------------------------
@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.reply(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )

@router.message(Command("setup"))
async def cmd_setup(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    user_id = message.from_user.id
    if not admins_store.read():
        admins_store.append(user_id)
        await message.reply(f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω: {user_id}")
    else:
        await message.reply("‚ùå –ê–¥–º–∏–Ω—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

async def warmup_amocrm():
    global mgr
    try:
        mgr = await asyncio.to_thread(AmoCRMCategoryManager) # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º loop
        logger.info("‚úÖ AmoCRM –≥–æ—Ç–æ–≤")
    except Exception as e:
        mgr = None
        logger.error("‚ö†Ô∏è AmoCRM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %s", e)
#--------------


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏

@router.callback_query(F.data == "adm_add")
@admin_required
async def cb_admin_add(query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    await query.answer()
    await query.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω—ã:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
            ]
        )
    )
    await state.set_state(Form.STATE_ADMIN_ADD)

@router.callback_query(F.data.startswith("adm_detail:"))
@admin_required  
async def cb_admin_detail(query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    await query.answer()
    admin_id = int(query.data.split(":", 1)[1])
    
    buttons = [
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete:{admin_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.message.edit_text(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_id}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

@router.message(Form.STATE_ADMIN_ADD)
@admin_required
async def handle_admin_add_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    try:
        user_id = int(message.text.strip())
        admins = admins_store.read()
        
        if user_id in admins:
            await message.reply(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_to_menu")]
                    ]
                )
            )
            return
            
        admins_store.append(user_id)
        await message.reply(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_to_menu")]
                ]
            )
        )
        await state.set_state(Form.STATE_MENU)
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
                ]
            )
        )

@router.callback_query(F.data.startswith("admin_delete:"))
@admin_required
async def cb_admin_delete(query: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    await query.answer()
    admin_id = int(query.data.split(":", 1)[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω
    admins = admins_store.read()
    if len(admins) <= 1:
        await query.message.edit_text(
            "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
            )
        )
        return
    
    admins_store.remove(lambda x: x == admin_id)
    await query.message.edit_text(
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É–¥–∞–ª–µ–Ω.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_to_menu")]
            ]
        )
    )
    await state.set_state(Form.STATE_MENU)

@router.callback_query(F.data == "admin_cancel")
@admin_required
async def cb_admin_cancel(query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞–¥–º–∏–Ω–∞–º–∏"""
    await query.answer()
    await query.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.set_state(Form.STATE_MENU)

@router.callback_query(F.data == "admin_back")
@admin_required
async def cb_admin_back(query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–æ–≤"""
    await query.answer()
    rows = build_admin_rows()
    await query.message.edit_text(
        "üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=rows)
    )

@router.callback_query(F.data == "admin_to_menu")
@admin_required
async def cb_admin_to_menu(query: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await query.answer()
    await query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await state.set_state(Form.STATE_MENU)

# ---------------------------------------------------------------------------
# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ
@router.message()
@admin_required
async def global_fallback(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ handle_menu.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_buttons = [button[0] for button in MENU_BUTTONS]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ MENU_BUTTONS –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
    is_menu_button = message.text in menu_buttons
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é (–≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
    if is_menu_button:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–µ —Ç–∞—â–∏—Ç—å —Å—Ç–∞—Ä—ã–π flow
        await state.set_state(Form.STATE_MENU)
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
        await handle_menu(message, state)
        return
    
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ä–µ—à–µ–Ω–∏–∏)
    if current_state is None:
        await message.reply(
            "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=create_persistent_main_menu()
        )
        await state.set_state(Form.STATE_MENU)
        return
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤)
    await message.reply(
        "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )

@router.callback_query(F.data == "to_main_menu")
@admin_required
async def cb_to_main_menu(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await state.clear()
    await state.set_state(Form.STATE_MENU)
    await query.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_persistent_main_menu()
    )

#--------------------------------------------

async def restore_scheduled_jobs():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        jobs = scheduled_store.read()
        current_time = now_tz()
        
        restored_count = 0
        expired_count = 0
        
        for job in jobs[:]:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            try:
                run_at = datetime.fromisoformat(job["run_at"])
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                if run_at < current_time:
                    scheduled_store.remove(lambda x: x["job_id"] == job["job_id"])
                    expired_count += 1
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {job['job_id']}")
                    continue
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
                asyncio.create_task(
                    job_queue.run_once(
                        job_send_distribution, 
                        run_at, 
                        job, 
                        job["job_id"]
                    )
                )
                restored_count += 1
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {job['job_id']} –Ω–∞ {fmt_local(run_at)}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {job.get('job_id', 'unknown')}: {e}")
        
        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {restored_count}, —É–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {expired_count}")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")

# ---------------------------------------------------------------------------
async def main():
    ensure_dirs()
    try:
        token = json.loads(TOKEN_FILE.read_text(encoding="utf-8"))["BOT_TOKEN"]
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è token.json")
        raise RuntimeError("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ token.json")

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –æ—à–∏–±–æ—á–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
    error_file = 'logs/Error_numbers.csv'
    os.makedirs('logs', exist_ok=True)

    # –ü–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç
    if not os.path.exists(error_file) or os.path.getsize(error_file) == 0:
        with open(error_file, mode='w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['lead_id', 'lead_name', 'phone', 'contact_name'])

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
    HEADERS = ["timestamp", "phone", "template_id", "funnel", "status", "response_info"]
    log_file = 'logs/delivery_logs.csv'
    os.makedirs('logs', exist_ok=True)

    # –ü–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç
    if not os.path.exists(log_file) or os.path.getsize(log_file) == 0:
        with open(log_file, mode='w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(HEADERS)

    generate_delivery_stats_report(date_from="2025-07-20", date_to="2025-07-21")

    bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    dp.include_router(router)

    asyncio.create_task(job_queue.process_jobs())
    asyncio.create_task(warmup_amocrm())
    
    # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
    await restore_scheduled_jobs()
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
